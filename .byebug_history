c
value + 7
value
t.strftime("%H:%M") <= "18:00" || t.strftime("%H:%M") >= "09:00" 
t.strftime("%H:%M") <= "18:00" || t.strftime("%H:%M") => "09:00" 
t.strftime("%a")
t.strftime("%a") == "Sat" || t.strftime("%a") == "Sun"
t.strftime("%a") == Sat || t.strftime("%a") == Sun
hoje.next_occurring(:sunday)
hoje = Date.todayn
today.next_week(:sunday)
puts t.strftime("%a")
t.strftime("%H:%M") <= "18:00"
t.strftime("%H:%M") >= "18:00"
t.strftime("%H:%M") == "18:00"
t.strftime("%H:%M") => "18:00"
t.strftime("%H:%M")
t.strftime("%H:%M %Z")
d.to_d
d.to_c
d.to_s
d.to_i
d.to_f
d.to_a
d.to_s
d = t.strftime("at %H:%M %Z")
c = t.strftime("at %H:%M %Z")
t.strftime("at %H:%M %Z")
puts t.strftime("at %H:%M %Z")
t.strftime("%a")
puts t.strftime("%a")
 t = Time.now
Time.now
c
today.next_occurring(:thursday)
today.next_occurring(:monday)
today.next_occurring(:)
today.next_week(:thursday) 
today.today.next_week(:thursday) 
today.prev_occurring(:thursday) 
today.prev_occurring(:monday) 
today.next_week(:saturday)
Saturday
today.next_week(:)
today.next_week(:friday)
today.next_weekend
today.next_week
today.next_weekday
today.next_weekenday
today.next_weekend
today.next_week
today = Date.today
DateTime
DateTime.curren
hoje.next_occurring(:thursday)
hoje.next_occurring(:fifth)
hoje.next_occurring(:tuesday)
hoje = Date.today
today.next_occurring(:thursday)
::Date.current
end_of_week(start_day = Date.beginning_of_week)last_hour(days_since(6 - days_to_week_start(start_day)))
end_of_week(start_day = Date.beginning_of_week)  last_hour(days_since(6 - days_to_week_start(start_day)))
 last_hour(days_since(6 - days_to_week_start(start_day)
 last_hour(days_since(6 - days_to_week_start(start_day)))
start_day = Date.beginning_of_week
tart_day = Date.beginning_of_week
 end_of_week ( :monday )
::Date.current
 DAYS_INTO_WEEK
  WEEKEND_DAYS.includes
  WEEKEND_DAYS
  WEEKEND_DAYS.include?(wday)
n
c
n
nn
n
c
n
nn
n
c
WEEKEND_DAYS.include?(wday)c
WEEKEND_DAYS.include?(wday)
  WEEKEND_DAYS = [ 6, 0 ]
    DAYS_INTO_WEEK = { sunday: 0,monday: 1,tuesday: 2, wednesday: 3, thursday: 4, friday: 5,saturday: 6}
WEEKEND_DAYS.include?(wday)
Time.now.to_s == d
Time.now.to_s
Time.now
hoje.to_s
hoje
d  == hoje 
d = Date.today.to_s << "18:00:00"
Date.today.to_s << "18:00:00"
Date.today.to_s
Date.today
Time.now.to_s
Time.now
hoje.prev_occurring(:saturday)
hoje.prev_occurring(:suturday)
Time.now.to_s >= "2023-03-09 18:00:0 "
Time.now.to_s >= " 18:00:0 "
Time.now.to_s >= "2023-03-09 18:00:0 "
Time.now.to_s >= "2023-03-09 18:00:0 -0300"
Time.now.to_s
Time.now
Time
hoje.prev_occurring(:saturday) 
hoje.prev_occurring(:suturday)
hoje.prev_occurring(:)
hoje.prev_occurring(:monday)
hoje = Date.today
Date.today.to_s
Date.today.to_a
Date.today.to_s
Date.today
Date.tody
Date.yesterday
c.to_fs
c.to_a
c.to_s
c.to_si
c.to_i
c =  Date.today
 Date.today
 Date.strptime('07-08-2018', '%d-%m-%Y') 
 Date.strptime('07-08-2018', '%d-%m-%Y','%a') 
 Date.strptime('07-08-2018', '%d-%m-%Y','%a) 
 Date.strptime('', '%d-%m-%Y') 
 Date.strptime('07-08-2018', '%d-%m-%Y') 
Date.strptime('%A')
Date.strptime(%A)
Date.strptime
time.yesterday
time.day
time = Time.new
Time.day
Timne.day
Date.day
qw == Wed
qw.first
qw = Date.yesterday
Date.yesterday
1.ago
1.go
1
1.hour.ago
ds == Fri
ds = Date.tomorrow
Date.tomorrow
c
User.find(transferred_user).update_columns(balance:"10")
User.find(transferred_user).update_columns(balace:"10")
User.find(transferred_user)
User.find(transfer_user)
User.find(transferred_user).update_columns(balace:"10")
transferred_user = @params[:transferred_user].to_i
User.find(transferred_user).update_columns(balace:"10")
transferred_user = @params[:transferred_user]
transferred_user = @params.transferred_user
@params
params
@translation
current_user
c
c = Date.yesterday 
c = Date.yesterday == Wed
Date.yesterday == Wed
Date.yesterday ==Wed
Date.yesterday
Time.now
Time.parse
Time
c
v
@translation.save
n
@transfer_type == deposit_type
n
password == password_user
password.present?
 @transfer_value.present?
@transfer_type.present?
c
current_user.update_columns(income: "4000")
 @translation.balance
 @translation
current_user
status = @translation.update_columns(balance: @transfer_value, translation_type: deposit)
n
c
@password.present?
@transfer_value.present?
 @transfer_type.present?
n
password == password_user
c
params.save
params
c
v
params.save
Translation.create(params)
create(params)
creat(params)
build(params)
Translation.create.params
params.create_at
params.create
params.creat
params
c
Translation
Translation.create(params)
Translation.creat
Translation
Translation.new(params)
Translation.new(params).save
params
Translation.new(@params).save
Translation.new(@params)
@transfer_type
status
Translation.count
c
current_user
c
@params
params
current_user
@current_user
c
@params
params
@translation
c
@params
Translationc
@translation
 status = @translation.update_columns(balance: @transfer_value, translation_type: deposit)
c
n
@current_user.balance
n
current_user.password_card
current_user
current_uer
c
params
c
@password_user = current_user.password_card
c
user
c
user = build(:user)
